{"mappings":"ACEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAgB,SAAS,aAAa,CAAC,eACvC,EAAmB,SAAS,aAAa,CAAC,eAC1C,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAkB,SAAS,aAAa,CAAC,kBAI/C,SAAS,IACP,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE3C,CAAA,EAAc,QAAQ,CAAG,GAPV,GAQf,EAAiB,QAAQ,CAAG,GAPb,EAQf,EAAa,QAAQ,CAAG,GATT,GAUf,EAAgB,QAAQ,CAAG,GATZ,CAUjB,CAEA,EAAc,gBAAgB,CAAC,QAAS,WACtC,GAAI,EAAM,IAAI,CAAC,MAAM,CAdN,GAcmB,CAIhC,IAAK,IAHC,EAAS,EAAM,SAAS,GACxB,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAElC,EAAI,EAAG,EAAI,EAAU,IAC5B,EAAO,UAAU,GAGnB,GACF,CACF,GAEA,EAAiB,gBAAgB,CAAC,QAAS,WACrC,EAAM,IAAI,CAAC,MAAM,CA1BN,IA2Bb,EAAM,SAAS,CAAC,IAChB,IAEJ,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACrC,GAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAlCf,GAkC4B,CACpC,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,E,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,GACF,CACF,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WACxC,GAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CA3Cf,EA2C4B,CACpC,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,GACF,CACF,GAEA","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nvar buttonAddRows = document.querySelector(\".append-row\");\nvar buttonRemoveRows = document.querySelector(\".remove-row\");\nvar buttonAddCol = document.querySelector(\".append-column\");\nvar buttonRemoveCol = document.querySelector(\".remove-column\");\nvar maxLimit = 10;\nvar minLimit = 2;\nfunction updateButtons() {\n    var rowCount = table.rows.length;\n    var colCount = table.rows[0].cells.length;\n    buttonAddRows.disabled = rowCount >= maxLimit;\n    buttonRemoveRows.disabled = rowCount <= minLimit;\n    buttonAddCol.disabled = colCount >= maxLimit;\n    buttonRemoveCol.disabled = colCount <= minLimit;\n}\nbuttonAddRows.addEventListener(\"click\", function() {\n    if (table.rows.length < maxLimit) {\n        var newRow = table.insertRow();\n        var colCount = table.rows[0].cells.length;\n        for(var i = 0; i < colCount; i++)newRow.insertCell();\n        updateButtons();\n    }\n});\nbuttonRemoveRows.addEventListener(\"click\", function() {\n    if (table.rows.length > minLimit) {\n        table.deleteRow(-1);\n        updateButtons();\n    }\n});\nbuttonAddCol.addEventListener(\"click\", function() {\n    if (table.rows[0].cells.length < maxLimit) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.insertCell();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtons();\n    }\n});\nbuttonRemoveCol.addEventListener(\"click\", function() {\n    if (table.rows[0].cells.length > minLimit) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.deleteCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtons();\n    }\n});\nupdateButtons();\n\n//# sourceMappingURL=index.69616afb.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst buttonAddRows = document.querySelector('.append-row');\nconst buttonRemoveRows = document.querySelector('.remove-row');\nconst buttonAddCol = document.querySelector('.append-column');\nconst buttonRemoveCol = document.querySelector('.remove-column');\nconst maxLimit = 10;\nconst minLimit = 2;\n\nfunction updateButtons() {\n  const rowCount = table.rows.length;\n  const colCount = table.rows[0].cells.length;\n\n  buttonAddRows.disabled = rowCount >= maxLimit;\n  buttonRemoveRows.disabled = rowCount <= minLimit;\n  buttonAddCol.disabled = colCount >= maxLimit;\n  buttonRemoveCol.disabled = colCount <= minLimit;\n}\n\nbuttonAddRows.addEventListener('click', () => {\n  if (table.rows.length < maxLimit) {\n    const newRow = table.insertRow();\n    const colCount = table.rows[0].cells.length;\n\n    for (let i = 0; i < colCount; i++) {\n      newRow.insertCell();\n    }\n\n    updateButtons();\n  }\n});\n\nbuttonRemoveRows.addEventListener('click', () => {\n  if (table.rows.length > minLimit) {\n    table.deleteRow(-1);\n    updateButtons();\n  }\n});\n\nbuttonAddCol.addEventListener('click', () => {\n  if (table.rows[0].cells.length < maxLimit) {\n    for (const row of table.rows) {\n      row.insertCell();\n    }\n\n    updateButtons();\n  }\n});\n\nbuttonRemoveCol.addEventListener('click', () => {\n  if (table.rows[0].cells.length > minLimit) {\n    for (const row of table.rows) {\n      row.deleteCell(-1);\n    }\n\n    updateButtons();\n  }\n});\n\nupdateButtons();\n"],"names":["table","document","querySelector","buttonAddRows","buttonRemoveRows","buttonAddCol","buttonRemoveCol","updateButtons","rowCount","rows","length","colCount","cells","disabled","addEventListener","newRow","insertRow","i","insertCell","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.69616afb.js.map"}